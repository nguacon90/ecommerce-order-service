package com.vctek.orderservice.exception;

import org.springframework.http.HttpStatus;

public enum ErrorCodes {
    ACCESS_DENIED("access_denied", "access_denied", HttpStatus.FORBIDDEN.value()),
    INTERNAL_SERVER_ERROR("ORDER-SERVER-001", "Internal server error", HttpStatus.INTERNAL_SERVER_ERROR.value()),
    NOT_FOUND_DATA("NOT-FOUND-DATA", "Not found data", HttpStatus.NOT_FOUND.value()),
    UNAUTHORIZED("ORDER-AUTH-001", "Unauthorized user", HttpStatus.UNAUTHORIZED.value()),
    REJECT_REDUNDANT_REQUEST("REJECT_REDUNDANT_REQUEST", "Reject redundant request", HttpStatus.NOT_ACCEPTABLE.value()),
    INVALID_ORDER_ID("ORDER-0000", "Invalid order id", HttpStatus.BAD_REQUEST.value()),
    INVALID_PAYMENT_TRANSACTION_ID("ORDER-0001", "Invalid payment transaction id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PAYMENT_TRANSACTION_ID("ORDER-0002", "empty payment transaction id", HttpStatus.BAD_REQUEST.value()),
    INVALID_PAYMENT_METHOD_ID("ORDER-0003", "Invalid payment method id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PAYMENT_METHOD_ID("ORDER-0004", "empty payment method id", HttpStatus.BAD_REQUEST.value()),
    INVALID_MONEY_SOURCE_ID("ORDER-0005", "Invalid money source id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_MONEY_SOURCE_ID("ORDER-0006", "empty money source id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_COMPANY_ID("ORDER-0007", "empty company id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_ID("ORDER-0008", "empty order id", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_TYPE("ORDER-0009", "Invalid order type", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PRODUCT_ID("ORDER-0010", "Empty product id", HttpStatus.BAD_REQUEST.value()),
    INVALID_PRODUCT_ID("ORDER-0011", "Invalid product id", HttpStatus.BAD_REQUEST.value()),
    INVALID_QUANTITY("ORDER-0012", "Invalid quantity, should be larger than 0", HttpStatus.BAD_REQUEST.value()),
    INVALID_DISCOUNT("ORDER-0013", "Invalid discount, should be larger than 0", HttpStatus.BAD_REQUEST.value()),
    INVALID_DISCOUNT_TYPE("ORDER-0014", "Invalid discount type", HttpStatus.BAD_REQUEST.value()),
    INVALID_PRODUCT_PRICE("ORDER-0015", "Invalid product price, should be larger than 0", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PRODUCT_PRICE("ORDER-0016", "Empty product price, please create price for this product", HttpStatus.BAD_REQUEST.value()),
    EMPTY_WAREHOUSE_ID("ORDER-0017", "Empty warehouse id", HttpStatus.BAD_REQUEST.value()),
    INVALID_ENTRY_NUMBER("ORDER-0018", "Invalid entry number", HttpStatus.BAD_REQUEST.value()),
    USER_HAS_NOT_PERMISSION_ON_WAREHOUSE("ORDER-0019", "User has not permission on warehouse", HttpStatus.BAD_REQUEST.value()),
    INVALID_VAT_TYPE("ORDER-0020", "Invalid vat type", HttpStatus.BAD_REQUEST.value()),
    EMPTY_CART_ID("ORDER-0021", "Empty cart id", HttpStatus.BAD_REQUEST.value()),
    NOT_EXISTED_ORDER_ID("ORDER-0022", "Not existed order id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_CUSTOMER_INFO("ORDER-0023", "Empty order customer information", HttpStatus.BAD_REQUEST.value()),
    NOTE_OVER_MAX_LENGTH("ORDER-0024", "Note should be smaller than 500 characters", HttpStatus.BAD_REQUEST.value()),
    CART_HAS_NOT_ENTRIES("ORDER-0025", "Cart has not entries", HttpStatus.BAD_REQUEST.value()),
    PRODUCT_STOP_SELLING("ORDER-0026", "Product is stopped selling", HttpStatus.BAD_REQUEST.value()),
    INVALID_JSON_FORMAT_OF_SEARCH_FIELD("ORDER-0027", "Invalid json format", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_UPDATE_ORDER("ORDER-0028", "Has not permission to update order information", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_VIEW_DETAIL_ORDER("ORDER-0029", "Has not permission to view detail order", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_ORDER_DISCOUNT("ORDER-0030", "Has not permission to edit order discount", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_ORDER_PRICE("ORDER-0031", "Has not permission to edit order price", HttpStatus.BAD_REQUEST.value()),
    PRODUCT_OUT_OF_STOCK("ORDER-0032", "Product is out of stock", HttpStatus.BAD_REQUEST.value()),
    INVALID_DEFINITION_ID("ORDER-0033", "Invalid definition id: {0}", HttpStatus.BAD_REQUEST.value()),
    PARSE_PARAMETERS_ERROR("ORDER-0034", "Parameter invalid format of definition id: {0}", HttpStatus.BAD_REQUEST.value()),
    PARSE_OPERATOR_ERROR("ORDER-0035", "Operator of definition id ({0}) is invalid format", HttpStatus.BAD_REQUEST.value()),
    INVALID_CAMPAIGN_ID("ORDER-0036", "Invalid campaign id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_CAMPAIGN_ID("ORDER-0037", "Empty campaign id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_CAMPAIGN_NAME("ORDER-0038", "Empty campaign name", HttpStatus.BAD_REQUEST.value()),
    INVALID_CAMPAIGN_STATUS("ORDER-0039", "Invalid campaign status", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PROMOTION_MODULE("ORDER-0040", "Company has not promotion module", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PROMOTION_CONDITIONS("ORDER-0041", "Empty promotion conditions", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PROMOTION_ACTIONS("ORDER-0042", "Empty promotion actions", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PROMOTION_MESSAGE_FIRED("ORDER-0043", "Empty promotion message fired", HttpStatus.BAD_REQUEST.value()),
    INIT_PROMOTION_MODULE_FAIL("ORDER-0044", "Init promotion module failure", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PROMOTION_CONDITION_VALUE("ORDER-0045", "Promotion condition empty value", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PROMOTION_ACTION_VALUE("ORDER-0046", "Promotion action empty value", HttpStatus.BAD_REQUEST.value()),
    INVALID_PROMOTION_FORMAT("ORDER-0047", "Promotion compile error because of invalid format data", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PROMOTION_PARAMETER_VALUE("ORDER-0048", "Empty promotion parameter value", HttpStatus.BAD_REQUEST.value()),
    INVALID_PROMOTION_QUANTITY("ORDER-0049", "Invalid promotion quantity value", HttpStatus.BAD_REQUEST.value()),
    INVALID_PROMOTION_PERCENTAGE("ORDER-0050", "Invalid promotion percentage, should be larger than 0 and smaller than 100", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_NOTE_ID("ORDER-0052", "Invalid order note id", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_CODE("ORDER-0053", "Invalid order code", HttpStatus.BAD_REQUEST.value()),
    INVALID_PROMOTION_SOURCE_RULE_ID("ORDER-0054", "Invalid promotion id", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORIGIN_ORDER_CODE("ORDER-0055", "Invalid origin order code", HttpStatus.BAD_REQUEST.value()),
    INVALID_EXCHANGE_CART_CODE("ORDER-0056", "Invalid exchange cart code", HttpStatus.BAD_REQUEST.value()),
    EMPTY_RETURN_ORDER_ENTRY("ORDER-0057", "Empty return order entries", HttpStatus.BAD_REQUEST.value()),
    INVALID_RETURN_ORDER_ENTRY_QUANTITY("ORDER-0058", "Invalid return order entry quantity", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_STATUS_THIS_ORDER("ORDER-0059", "Can not change status this order", HttpStatus.BAD_REQUEST.value()),
    EMPTY_CANCEL_TEXT_ORDER_ONLINE("ORDER-0060", "Empty cancel text order online", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_STATUS_CHANGE("ORDER-0061", "Invalid order status change", HttpStatus.BAD_REQUEST.value()),
    ONLY_COMPLETED_STATUS_CAN_CHANGE_TO_RETAIL("ORDER-0062", "Only completed status can change to retail", HttpStatus.BAD_REQUEST.value()),
    EMPTY_CASH_PAYMENT_WAREHOUSE_ID("ORDER-0063", "Empty cash payment warehouse id", HttpStatus.BAD_REQUEST.value()),
    INVALID_RETURN_ORDER_ID("ORDER-0064", "Invalid return order id", HttpStatus.BAD_REQUEST.value()),
    NOT_ACCEPT_MODIFIED_ORDER("ORDER-0065", "order status is not valid to modify", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_CODE_OR_PRODUCT_ID("ORDER-0066", "invalid order code or product id", HttpStatus.BAD_REQUEST.value()),
    RETURN_ORDER_HAS_NOT_ORIGIN_ORDER("ORDER-0067", "Invalid return order because it has not origin order", HttpStatus.BAD_REQUEST.value()),
    INVALID_EXCHANGE_ORDER_CODE_IN_RETURN_ORDER("ORDER-0068", "Invalid exchange order code of return order", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_TO_OTHER_WAREHOUSE("ORDER-0069", "Cannot change warehouse of return order with exchange order is not empty", HttpStatus.BAD_REQUEST.value()),
    EMPTY_SHIPPING_COMPANY_ID("ORDER-0070", "Empty shipping company id", HttpStatus.BAD_REQUEST.value()),
    ONLY_ONLINE_TYPE_CAN_CHANGE_TO_RETAIL("ORDER-0071", "Only online type can change to retail", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CREATE_RETURN_FOR_UNCOMPLETED_ONLINE_ORDER("ORDER-0072", "Cannot create return order for uncompleted online order", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_SOURCE_NAME("ORDER-0073", "Empty order source name", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_SOURCE_ID("ORDER-0074", "Invalid  order source id", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_TO_LOW_LEVEL_STATUS("ORDER-0075", "Cannot change from high status to lower status", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_TO_HIGH_LEVEL_STATUS("ORDER-0076", "Cannot change to level higher than returning status", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_COMPLETED_STATUS("ORDER-0077", "Cannot change completed to other except changing to retail order", HttpStatus.BAD_REQUEST.value()),
    EMPTY_FROM_DATE("ORDER-0078", "empty from date", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CHANGE_STATUS_OVER_CONFIRMED("ORDER-0079", "Not allow to change from lower confirmed status to higher confirmed status", HttpStatus.BAD_REQUEST.value()),
    NOT_ACCEPT_CHANGE_STATUS_BEFORE_SHIPPING("ORDER-0080", "Not accept to change order status not from shipping status", HttpStatus.BAD_REQUEST.value()),
    INVALID_COMBO_ID("ORDER-0081", "Invalid combo id", HttpStatus.BAD_REQUEST.value()),
    EXISTED_PRODUCT_IN_COMBO("ORDER-0082", "existed product in combo", HttpStatus.BAD_REQUEST.value()),
    NOT_EXISTED_PRODUCT_IN_COMBO("ORDER-0083", "not existed product in combo", HttpStatus.BAD_REQUEST.value()),
    EMPTY_COMBO_ID("ORDER-0084", "empty combo id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ENTRY_NUMBER("ORDER-0085", "empty entry number", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_CODE("ORDER-0086", "empty order code", HttpStatus.BAD_REQUEST.value()),
    EMPTY_COUPON_NAME("ORDER-0087", "Empty coupon name", HttpStatus.BAD_REQUEST.value()),
    INVALID_COUPON_LENGTH("ORDER-0088", "Invalid coupon length, should larger than 0", HttpStatus.BAD_REQUEST.value()),
    INVALID_COUPON_QUANTITY("ORDER-0089", "Invalid coupon quantity, should larger than 0", HttpStatus.BAD_REQUEST.value()),
    INVALID_COUPON_MAX_TOTAL_REDEMPTION("ORDER-0090", "Invalid coupon max total redemption, should larger than 0", HttpStatus.BAD_REQUEST.value()),
    EMPTY_COUPON_CODES("ORDER-0091", "Empty coupon codes", HttpStatus.BAD_REQUEST.value()),
    INVALID_COUPON_ID("ORDER-0092", "Invalid coupon id", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_REMOVE_COUPON_USING_FOR_PROMOTION("ORDER-0093", "Cannot remove coupon using for promotion", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CHANGE_QUALIFYING_REDEEMED_COUPON("ORDER-0094", "Cannot change coupon because of redemption", HttpStatus.BAD_REQUEST.value()),
    CANNOT_UPDATE_REDEMPTION_COUPON_CODE("ORDER-0095", "Cannot update coupon because of redemption", HttpStatus.BAD_REQUEST.value()),
    EMPTY_APPLIED_COUPON_CODE("ORDER-0096", "Empty applied coupon code", HttpStatus.BAD_REQUEST.value()),
    EXISTED_COUPON_IN_ORDER("ORDER-0097", "Existed coupon code in order", HttpStatus.BAD_REQUEST.value()),
    INVALID_COUPON_CODE("ORDER-0098", "Invalid coupon code", HttpStatus.BAD_REQUEST.value()),
    COUPON_OVER_MAX_REDEMPTION("ORDER-0099", "Coupon code over max total redemption", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_COUPON_CODE_OF_ONLINE_ORDER("ORDER-0100", "Cannot change coupon code of order because of not accepted in order status", HttpStatus.BAD_REQUEST.value()),
    PRODUCT_EXCEED_ALLOWED_QUANTITY("ORDER-0101", "product exceeds allowed quantity", HttpStatus.BAD_REQUEST.value()),
    EMPTY_SUB_ORDER_ENTRY_ID("ORDER-0102", "Empty sub order entry id", HttpStatus.BAD_REQUEST.value()),
    CANNOT_REMOVE_SUB_ORDER_ENTRY("ORDER-0103", "cannot remove sub order entry because combo type is fixed", HttpStatus.BAD_REQUEST.value()),
    INVALID_SUB_ORDER_ENTRY_ID("ORDER-0104", "invalid sub order entry ", HttpStatus.BAD_REQUEST.value()),
    INVALID_SUB_ORDER_ENTRY_QUANTITY("ORDER-0105", "invalid sub order entry quantity", HttpStatus.BAD_REQUEST.value()),
    PRODUCT_IS_NOT_COMBO("ORDER-0106", "Product is not Combo", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CHANGE_COMBO_ENTRY("ORDER-0107", "Cannot change combo entry of order not online type", HttpStatus.BAD_REQUEST.value()),
    NOT_ACCEPT_CHANGE_ORDER_ENTRY("ORDER-0108", "Order status that not accepted to change combo entry", HttpStatus.BAD_REQUEST.value()),
    CANNOT_PRE_ORDER_CONTAIN_COMBO_ENTRY("ORDER-0109", "Cannot change order status that contains combo entry", HttpStatus.BAD_REQUEST.value()),
    EMPTY_IMPORT_ORDER_PRODUCT("ORDER-0110", "Empty product in order import file", HttpStatus.BAD_REQUEST.value()),
    CANNOT_IMPORT_FOR_NOT_ONLINE_ORDER("ORDER-0111", "Not accepted to import product into order not online", HttpStatus.BAD_REQUEST.value()),
    CANNOT_IMPORT_FOR_ONLINE_ORDER_STATUS("ORDER-0112", "Not accepted to import product into order not valid status", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_VIEW_LIST_ORDER("ORDER-0113", "Has not permission to view order list", HttpStatus.BAD_REQUEST.value()),
    OVER_TIME_TO_MODIFY_ORDER("ORDER-0114", "Overtime to modified order", HttpStatus.BAD_REQUEST.value()),
    INVALID_TOPPING_OPTION_ID("ORDER-0115", "invalid order entry topping id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PERCENT_SUGAR("ORDER-0116", "Empty percent sugar", HttpStatus.BAD_REQUEST.value()),
    INVALID_PERCENT_SUGAR("ORDER-0117", "Invalid percent sugar", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PERCENT_ICE("ORDER-0118", "Empty percent ice", HttpStatus.BAD_REQUEST.value()),
    INVALID_PERCENT_ICE("ORDER-0119", "Invalid percent ice", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PRICE_PRODUCT("ORDER-0120", "Empty price product in sub order entry topping", HttpStatus.BAD_REQUEST.value()),
    INVALID_PRICE_PRODUCT("ORDER-0121", "Product has not price", HttpStatus.BAD_REQUEST.value()),
    INVALID_QUANTITY_IN_TOPPING_OPTION("ORDER-0122", "Invalid quantity, should be less or equal order entry quantity", HttpStatus.BAD_REQUEST.value()),
    INVALID_TOPPING_ITEM_ID("ORDER-0123", "invalid sub order entry topping id", HttpStatus.BAD_REQUEST.value()),
    COUPON_HAD_ASSIGNED_TO_PROMOTION("ORDER-0124", "Coupon had been used for other promotion", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_CREATE_RETAIL_BILL("ORDER-0125", "Has not permission to create bill retail", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_CREATE_ORDER("ORDER-0126", "Has not permission to create order", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_CREATE_WHOLESALE_BILL("ORDER-0127", "Has not permission to create bill wholesale", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_UPDATE_RETAIL_BILL("ORDER-0128", "Has not permission to update bill retail information", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_UPDATE_WHOLESALE_BILL("ORDER-0129", "Has not permission to update wholesale bill information", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_VIEW_DETAIL_RETAIL_BILL("ORDER-0130", "Has not permission to view detail retail bill", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_VIEW_DETAIL_WHOLESALE_BILL("ORDER-0131", "Has not permission to view detail wholesale bill", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_RETAIL_BILL_DISCOUNT("ORDER-0132", "Has not permission to edit retail bill discount", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_WHOLESALE_BILL_DISCOUNT("ORDER-0133", "Has not permission to edit wholesale bill discount", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_RETAIL_BILL_PRICE("ORDER-0134", "Has not permission to edit retail bill price", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_WHOLESALE_BILL_PRICE("ORDER-0135", "Has not permission to edit wholesale bill price", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_VIEW_LIST_RETAIL_BILL("ORDER-0136", "Has not permission to view retail bill list", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_VIEW_LIST_WHOLESALE_BILL("ORDER-0137", "Has not permission to view wholesale bill list", HttpStatus.BAD_REQUEST.value()),
    CANNOT_READ_EXCEL_FILE("ORDER-0138", "Error occurs when reading excel file", HttpStatus.BAD_REQUEST.value()),
    EXISTED_PRODUCT_IN_GROUP_COMBO("ORDER-0139", "existed product in group combo", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_DISCOUNT_NEW_RETAIL_BILL("ORDER-0140", "Has not permission to edit discount new retail bill", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_DISCOUNT_NEW_WHOLESALE_BILL("ORDER-0141", "Has not permission to edit discount new wholesale bill", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_DISCOUNT_NEW_ONLINE_BILL("ORDER-0142", "Has not permission to edit discount new online bill", HttpStatus.BAD_REQUEST.value()),
    NOT_ALLOW_REDEMPTION_MULTIPLE_COUPON_IN_ORDER("ORDER-0143", "Not allow redemption multiple coupons", HttpStatus.BAD_REQUEST.value()),
    INVALID_COUPON_TOTAL_REDEMPTION_QUANTITY("ORDER-0144", "Invalid coupon total redemption quantity. Should be larger than 0", HttpStatus.BAD_REQUEST.value()),
    COUPON_OVER_MAX_REDEMPTION_QUANTITY("ORDER-0145", "Coupon redemption quantity over allowed maximum quantity", HttpStatus.BAD_REQUEST.value()),
    INVALID_PAID_AMOUNT_FOR_ORDER("ORDER-0146", "Invalid paid amount. Should larger than or equal final price of order", HttpStatus.BAD_REQUEST.value()),
    EMPTY_LOYALTY_PHONE_NUMBER("ORDER-0147", "Empty phone number to register loyalty card", HttpStatus.BAD_REQUEST.value()),
    INVALID_LOYALTY_CARD_NUMBER("ORDER-0148", "Invalid loyalty card number", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_WAREHOUSE_OR_COMPANY("ORDER-0149", "Cannot change warehouse or company of order with status larger than confirming change", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_WAREHOUSE_PERMISSION_TO_CREATE_ORDER("ORDER-0150", "Has not warehouse permission to create order", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_FINAL_PRICE("ORDER-0151", "Order amount is not valid. Should larger than 0", HttpStatus.BAD_REQUEST.value()),
    DUPLICATE_PRODUCT_IN_PARTNER_PRODUCT_PROMOTION("ORDER-0152", "Duplicate production in action and condition of partner product promotion", HttpStatus.BAD_REQUEST.value()),
    CANNOT_PRE_ORDER_CONTAIN_FOOD_BEVERAGE_ENTRY("ORDER-0153", "Cannot change to pre order status that contains beverage or food entry", HttpStatus.BAD_REQUEST.value()),
    EXISTED_INVALID_COUPON("ORDER-0154", "Existed invalid applied coupon code", HttpStatus.BAD_REQUEST.value()),
    EMPTY_LOYALTY_REWARD_RATE_DATA("ORDER-0155", "Empty loyalty reward rate data", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PRODUCT_LOYALTY_REWARD_RATE("ORDER-0156", "Has not product loyalty reward rate data", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_CATEGORY_LOYALTY_REWARD_RATE("ORDER-0157", "Has not category loyalty reward rate data", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PRODUCT_OR_CATEGORY_DATA("ORDER-0158", "empty product or category data", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_ENTRY_ID("ORDER-0159","Invalid order entry id", HttpStatus.BAD_REQUEST.value()),
    EMPTY_LOYALTY_CARD_NUMBER("ORDER-0160","empty loyalty card number", HttpStatus.BAD_REQUEST.value()),
    CANNOT_EXCEED_AVAILABLE_POINTS("ORDER-0161","cannot exceed available points", HttpStatus.BAD_REQUEST.value()),
    INVALID_POINT_FOR_ORDER("ORDER-0162","cannot exceed available points", HttpStatus.BAD_REQUEST.value()),
    INVALID_REFUND_AMOUNT("ORDER-0163", "invalid refund amount", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_EXISTED_REFER_INVOICE_FOR_REVERT("ORDER-0164", "has not existed refer invoice for revert",HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_EXISTED_REFER_INVOICE_FOR_REFUND("ORDER-0165", "has not existed refer invoice for refund",HttpStatus.BAD_REQUEST.value()),
    CANNOT_UPDATE_BECAUSE_ORDER_HAS_RETURN_ORDER("ORDER-0166", "cannot update because order has return order",HttpStatus.BAD_REQUEST.value()),
    CANNOT_UPDATE_LOYALTY_CARD_INFO("ORDER-0167", "cannot update loyalty card info",HttpStatus.BAD_REQUEST.value()),
    INACTIVE_LOYALTY_CARD("ORDER-0168", "Loyalty card had been inactive", HttpStatus.BAD_REQUEST.value()),
    LOYALTY_CARD_HAS_NOT_ASSIGNED("ORDER-0169", "Loyalty card has not been assigned", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_REFUND_POINTS("ORDER-0170", "can not change refund points  because return order all ", HttpStatus.BAD_REQUEST.value()),
    EMPTY_OLD_COMPANY("ORDER-0171", "Empty old card or order company when refreshing", HttpStatus.BAD_REQUEST.value()),
    INVALID_AMOUNT_OF_COMBO_PRICE_SETTING("ORDER-0172", "Invalid amount of combo price setting. Should be larger than 0", HttpStatus.BAD_REQUEST.value()),
    INVALID_COMBO_PRICE_LESS_THAN("ORDER-0173", "Combo price is not valid. Should less than total origin price in combo", HttpStatus.BAD_REQUEST.value()),
    INVALID_COMBO_PRICE_LARGER_THAN("ORDER-0174", "Combo price is not valid. Should larger than minimum price", HttpStatus.BAD_REQUEST.value()),
    EMPTY_COMBO_GROUP_NUMBER("ORDER-0175", "empty combo group number", HttpStatus.BAD_REQUEST.value()),
    INVALID_REWARD_RATE("ORDER-0176", "Invalid reward rate. Should be larger than 0", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_RETAIL_PRICE_COMBO("ORDER-0177", "Has not permission to edit retail price", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_WHOLESALE_PRICE_COMBO("ORDER-0178", "Has not permission to edit wholesale price", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_EDIT_ORDER_PRICE_COMBO("ORDER-0179", "Has not permission to edit order price", HttpStatus.BAD_REQUEST.value()),
    EMPTY_IMPORT_PRODUCT_LOYALTY_REWARD_RATE("ORDER-0180", "Empty import product loyalty reward rate file", HttpStatus.BAD_REQUEST.value()),
    CANNOT_UPDATE_CHANGE_TO_RETAIL_ORDER("ORDER-0181", "Cannot update retail having change to retail status", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CREATE_ONLINE_ORDER_HAS_RETURN_BILL("ORDER-0182", "Cannot create new return bill for online order that has bill", HttpStatus.BAD_REQUEST.value()),
    IMPORT_OVER_MAXIMUM_ITEM_SIZE("ORDER-0183", "Import order over maximum number of items", HttpStatus.BAD_REQUEST.value()),
    INVALID_INTEGER_POINT_FOR_ORDER("ORDER-0184", "Redeem point is not integer number", HttpStatus.BAD_REQUEST.value()),
    CANNOT_VIEW_ORDER_NOT_BELONG_TO_ACCOUNT("ORDER-0185", "Cannot view order not belong to the account", HttpStatus.BAD_REQUEST.value()),
    CANNOT_UPDATE_ONLINE_ORDER("ORDER-0186", "Cannot update online order because of status not accepted", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_EDIT_DISCOUNT_ON_EXCHANGE("ORDER-0187", "Has not permission update discount on exchange", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_EDIT_PRICE_ON_EXCHANGE("ORDER-0188", "Has not permission update price on exchange", HttpStatus.BAD_REQUEST.value()),
    EMPTY_PRICE_TYPE("ORDER-0189", "Empty price type", HttpStatus.BAD_REQUEST.value()),
    INVALID_PRICE_TYPE("ORDER-0190", "Invalid price type", HttpStatus.BAD_REQUEST.value()),
    PRODUCT_HAS_NOT_WHOLESALE_PRICE("ORDER-0191", "product not wholesale price", HttpStatus.BAD_REQUEST.value()),
    RETAIL_PRICE_MUST_BE_LARGE_WHOLESALE_PRICE("ORDER-0192", "retail price must be large wholesale price", HttpStatus.BAD_REQUEST.value()),
    SHIPPING_FEE_MUST_BE_LARGE_ZERO("ORDER-0193", "shipping fee must be large zero", HttpStatus.BAD_REQUEST.value()),
    CANNOT_ADD_FNB_TO_PREORDER("ORDER-0194", "Cannot add FNB product to pre order", HttpStatus.BAD_REQUEST.value()),
    CANNOT_ADD_COMBO_TO_PREORDER("ORDER-0195", "Cannot add combo product to pre order", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_SOURCE_ID("ORDER-0196", "Empty order source", HttpStatus.BAD_REQUEST.value()),
    INVALID_PHONE_NUMBER("ORDER-0197", "Invalid phone number", HttpStatus.BAD_REQUEST.value()),
    INVALID_SETTING_MAXIMUM_DISCOUNT_PRODUCT("ORDER-0198", "invalid setting maximum discount product of order", HttpStatus.BAD_REQUEST.value()),
    DISCOUNT_MUST_BE_LESS_SETTING_MAXIMUM_DISCOUNT("ORDER-0199", "discount must be less maximum discount", HttpStatus.BAD_REQUEST.value()),
    EMPTY_IMPORT_PRODUCT_SETTING_DISCOUNT("ORDER-0200", "empty import order setting discount", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_SETTING("ORDER-0201", "invalid order setting", HttpStatus.BAD_REQUEST.value()),
    CANNOT_MODIFIED_DIRECT_EXCHANGE_ORDER("ORDER-0202", "Cannot modified exchange order", HttpStatus.BAD_REQUEST.value()),
    ORDER_WITH_INACTIVE_WAREHOUSE("ORDER-0203", "Order with inactive warehouse can not be modified", HttpStatus.BAD_REQUEST.value()),
    CART_WITH_INACTIVE_WAREHOUSE("ORDER-0204", "Cart with inactive warehouse can not be modified", HttpStatus.BAD_REQUEST.value()),
    INACTIVE_WAREHOUSE("ORDER-0205", "Warehouse is inactive", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_INVOICE_VERIFIED("ORDER-0206", "cannot delete order because invoice verified", HttpStatus.BAD_REQUEST.value()),
    INVALID_DISTRIBUTOR_ID("ORDER-0207", "invalid distributor", HttpStatus.BAD_REQUEST.value()),
    INVALID_RECOMMENDED_RETAIL_PRICE("ORDER-0208", "invalid Recommended Retail Price", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_PERMISSION_TO_UPDATE_RECOMMENDED_RETAIL_PRICE("ORDER-0209", "has not permission to update recommended retail price", HttpStatus.BAD_REQUEST.value()),
    CHANGE_PRICE_TYPE_INVALID_COMBO_PRICE_LARGER_THAN_OR_LESS_THAN("ORDER-0210", "change price type invalid combo price larger than or less_than", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_SETTING_CUSTOMER_NAME("ORDER-0211", "empty order setting customer name", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_SETTING_CUSTOMER_PRIORITY("ORDER-0212", "empty order setting customer priority", HttpStatus.BAD_REQUEST.value()),
    OVER_MAX_LENGTH_100("ORDER-0213", "should be smaller than 100 characters", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_SETTING_CUSTOMER("ORDER-0214", "invalid order setting customer", HttpStatus.BAD_REQUEST.value()),
    CANNOT_EMPTY_ORDER_SETTING_CUSTOMER_OPTIONS("ORDER-0215", "cannot empty order setting customer options", HttpStatus.BAD_REQUEST.value()),
    UNIQUE_ORDER_SETTING_CUSTOMER_NAME("ORDER-0216", "name has exits of order setting customer name", HttpStatus.BAD_REQUEST.value()),
    UNIQUE_ORDER_SETTING_CUSTOMER_OPTION_NAME("ORDER-0217", "name has exits of order setting customer option name", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_SETTING_CUSTOMER_PRIORITY("ORDER-0218", "Invalid order setting customer priority, should larger than 0", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_SETTING_CUSTOMER_OPTIONS("ORDER-0219", "Invalid order setting customer option", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_SETTING_CUSTOMER_OPTION_NAME("ORDER-0220", "empty order setting customer option name", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_EXISTED_REFER_INVOICE_FOR_REDEEM("ORDER-0221", "has not existed refer invoice for redeem", HttpStatus.BAD_REQUEST.value()),
    EMPTY_ORDER_STATUS("ORDER-0222", "empty order status import", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_STATUS_IMPORT_DETAIL_ID("ORDER-0223", "invalid order status import detail id", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CHANGE_WITH_CURRENT_STATUS_OVER_COMPLETED("ORDER-0224", "cannot change order status with current status larger than or equals completed", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CHANGE_ORDER_PROCESSING("ORDER-0225", "cannot change order processing", HttpStatus.BAD_REQUEST.value()),
    INVALID_ORDER_DELIVERY_DATE("ORDER-0226", "order delivery date cannot empty", HttpStatus.BAD_REQUEST.value()),
    OVER_MAX_SUPPORTED_ORDER_SIZE_FOR_CHANGE_STATUS("ORDER-0227", "Over maximum supported order size", HttpStatus.BAD_REQUEST.value()),
    DUPLICATE_ORDER_CODE_FOR_CHANGE_STATUS("ORDER-0228", "Duplicate order code", HttpStatus.BAD_REQUEST.value()),
    ORDER_PROCESS_IMPORT_CHANGE_STATUS_CANNOT_UPDATE("ORDER-0229", "Cannot update because order process import change status", HttpStatus.BAD_REQUEST.value()),
    EMPTY_TAG_NAME("ORDER-0230", "Empty tag name", HttpStatus.BAD_REQUEST.value()),
    INVALID_TAG("ORDER-0231", "Invalid tag name", HttpStatus.BAD_REQUEST.value()),
    EXISTED_TAG_NAME("ORDER-0232", "Existed tag name", HttpStatus.BAD_REQUEST.value()),
    TAG_NAME_OVER_MAX_LENGTH("ORDER-0233", "Tag name is over max length", HttpStatus.BAD_REQUEST.value()),
    PRODUCT_OUT_OF_BROKEN_STOCK("ORDER-0234", "Product is out of broken stock", HttpStatus.BAD_REQUEST.value()),
    ENTRY_QUANTITY_OVER_BROKEN_STOCK("ORDER-0235", "Quantity of entry is over broken stock", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_SALE_OFF_FNB_PRODUCT("ORDER-0236", "Cannot sale off FnB product", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_SALE_OFF_COMBO("ORDER-0237", "Cannot sale off combo", HttpStatus.BAD_REQUEST.value()),
    SWITCH_SALE_OFF_QUANTITY_OVER_AVAILABLE_STOCK("ORDER-0238", "Switch sale off quantity over available stock", HttpStatus.BAD_REQUEST.value()),
    HAS_NOT_CHANGE_STATUS_IN_SETTING("ORDER-0239", "You must change status in setting create transfer warehouse", HttpStatus.BAD_REQUEST.value()),
    CHANGE_STATUS_CREATE_TRANSFER_WAREHOUSE_QUANTITY_OVER_AVAILABLE_STOCK("ORDER-0240", "Invalid change status in setting create transfer warehouse because quantity over available stock", HttpStatus.BAD_REQUEST.value()),
    INACTIVE_DELIVERY_WAREHOUSE("ORDER-0241", "Inactive delivery warehouse", HttpStatus.BAD_REQUEST.value()),
    CANNOT_CREATE_STORE_FRONT_CART("ORDER-0242", "Cannot create storefront cart because default warehouse is not setup", HttpStatus.BAD_REQUEST.value()),
    INVALID_SUB_ENTRY_FOR_COMBO("ORDER-0243", "Not choose enough product for combo", HttpStatus.BAD_REQUEST.value()),
    OFF_SITE_PRODUCT("ORDER-0244", "Product is offsite", HttpStatus.BAD_REQUEST.value()),
    NOT_ENOUGH_STOCK("ORDER-0245", "Not enough stock", HttpStatus.BAD_REQUEST.value()),
    NOT_ENOUGH_ITEM_IN_COMBO("ORDER-0246", "Not enough item in combo", HttpStatus.BAD_REQUEST.value()),
    INVALID_TOTAL_ITEM_IN_COMBO("ORDER-0247", "Invalid total item in combo", HttpStatus.BAD_REQUEST.value()),
    OVER_MAX_ITEM_IN_COMBO("ORDER-0248", "over max item in combo", HttpStatus.BAD_REQUEST.value()),
    ORDER_ENTRY_PRICE_CHANGE("ORDER-0249", "Product changed price in order entry", HttpStatus.BAD_REQUEST.value()),
    INVALID_SHIPPING_PROVINCE_ID("ORDER-0250", "Invalid shipping province id", HttpStatus.BAD_REQUEST.value()),
    INVALID_SHIPPING_DISTRICT_ID("ORDER-0251", "Invalid shipping district id", HttpStatus.BAD_REQUEST.value()),
    DELIVERY_COST_DIFFERENT_SETTING_SHIPPING_FEE("ORDER-0252", "Delivery cost different setting shipping fee", HttpStatus.BAD_REQUEST.value()),
    CUSTOMER_CAN_NOT_CANCEL_NOT_CONFIRMED_ORDER("ORDER-0253", "Customer cannot cancel not confirmed order", HttpStatus.BAD_REQUEST.value()),
    EMPTY_SHIPPING_PHONE("ORDER-0254", "Empty shipping phone", HttpStatus.BAD_REQUEST.value()),
    INVALID_SHIPPING_PHONE_NUMBER("ORDER-0255", "Invalid shipping phone format", HttpStatus.BAD_REQUEST.value()),
    COUPON_NOT_APPLIED("ORDER-0256", "Coupon not applied because order is not enough condition", HttpStatus.BAD_REQUEST.value()),
    EMPTY_SHIPPING_ADDRESS_DETAIL("ORDER-0257", "Empty shipping address detail", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_CHANGE_TO_RETAIL_STATUS_ECOMMERCE_WEB("ORDER-0258", "Cannot change to retail status ecommerce web", HttpStatus.BAD_REQUEST.value()),
    CAN_NOT_REMOVE_ECOMMERCE_WEB("ORDER-0259", "Cannot remove ecommerce web", HttpStatus.BAD_REQUEST.value()),
    ORDER_HAS_INVALID_PROMOTION("ORDER-0260", "Order contain invalid promotion", HttpStatus.BAD_REQUEST.value()),
    INVALID_FREE_GIFT_PRODUCT("ORDER-0261", "Free combo is invalid", HttpStatus.BAD_REQUEST.value()),
    EMPTY_COUPON_CONDITION("ORDER-0262", "Promotion must be contain coupon code condition", HttpStatus.BAD_REQUEST.value()),
    INVALID_SELL_SIGNAL("ORDER-0263", "Sell signal is not supported", HttpStatus.BAD_REQUEST.value()),
    ;

    private String code;
    private String message;
    private int httpStatus;

    ErrorCodes(String code, String message, int httpStatus) {
        this.code = code;
        this.message = message;
        this.httpStatus = httpStatus;
    }

    public String code() {
        return this.code;
    }

    public String message() {
        return this.message;
    }

    public int httpStatus() {
        return this.httpStatus;
    }
}
